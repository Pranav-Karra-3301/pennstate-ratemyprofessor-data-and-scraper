name: Monthly Data Update

on:
  schedule:
    # Run at 3:00 AM EST on the 1st of every month
    - cron: '0 8 1 * *'  # 8 AM UTC = 3 AM EST
  workflow_dispatch:  # Allow manual trigger

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run scraper
        run: |
          echo "Starting scraper at $(date)"
          python -m scraper.api_scraper --max 2000 --enhance 500
          echo "Scraper completed at $(date)"
      
      - name: Validate data
        run: |
          echo "Validating scraped data..."
          if [ ! -f data/penn_state_professors.jsonl ]; then
            echo "Error: Output file not found"
            exit 1
          fi
          
          # Check if file has content
          lines=$(wc -l < data/penn_state_professors.jsonl)
          echo "Total professors scraped: $lines"
          
          if [ "$lines" -lt 100 ]; then
            echo "Warning: Less than 100 professors scraped"
            exit 1
          fi
          
          # Validate JSON format
          python -c "
import json
import sys
with open('data/penn_state_professors.jsonl', 'r') as f:
    for i, line in enumerate(f, 1):
        try:
            json.loads(line)
        except json.JSONDecodeError as e:
            print(f'Invalid JSON at line {i}: {e}')
            sys.exit(1)
print('All JSON lines are valid')
          "
          
          # Show sample data
          echo "Sample of scraped data:"
          head -3 data/penn_state_professors.jsonl | python -m json.tool
      
      - name: Check for changes
        id: check_changes
        run: |
          git diff --quiet data/penn_state_professors.jsonl || echo "changes=true" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            ðŸ“Š Update professor data - ${{ github.run_number }}
            
            Automated monthly update of Penn State professor data from RateMyProfessor.
            
            Run ID: ${{ github.run_id }}
            Run Number: ${{ github.run_number }}
          branch: update/professor-data-${{ github.run_number }}
          delete-branch: true
          title: 'ðŸ“Š Monthly Data Update - ${{ github.run_number }}'
          body: |
            ## ðŸ“Š Automated Monthly Data Update
            
            This PR contains the latest Penn State professor data from RateMyProfessor.
            
            ### Update Details
            - **Run Date**: ${{ github.event.repository.updated_at }}
            - **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Data File**: `data/penn_state_professors.jsonl`
            
            ### What's Updated
            - Professor ratings and reviews
            - Course information
            - Teaching tags
            - Department information
            
            ### Validation
            âœ… Data format validated
            âœ… JSON structure verified
            âœ… Minimum professor count met
            
            ---
            *This is an automated pull request generated by the monthly scraping workflow.*
          labels: |
            data-update
            automated
          assignees: Pranav-Karra-3301
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "Scraping workflow failed. Check the logs for details."
          echo "Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"